import {{ camelCase name }}Thunk from '../{{ snakeCase name }}';

// TODO replace mock value with realistic return.
const mockValue = 'hello world';
const mockError = 'Failure';
const doNothing = jest.fn(() => null);
const fakePromise = jest.fn(() => new Promise((resolve) => {
  resolve({ json: () => mockValue });
}));
global.fetch = fakePromise;

jest.mock('../../creators/{{ snakeCase name }}', () => ({
  request{{ properCase name }}: jest.fn(doNothing),
  success{{ properCase name }}: jest.fn(doNothing),
  failure{{ properCase name }}: jest.fn(doNothing),
}));

it('{{ camelCase name }}Thunk shall successfully execute when fetch resovles.', () => {
  expect.assertions(1);
  {{ camelCase name }}Thunk()(doNothing).then(() => {
    expect(doNothing).toBeCalledWith(mockValue);
  });
});

it('{{ camelCase name }}Thunk shall successfully execute when fetch resovles.', () => {
  {{ camelCase name }}Thunk()(doNothing).then(() => {
    expect(doNothing).toBeCalledWith(mockError);
  })
});
